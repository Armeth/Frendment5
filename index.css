/* ----------------- */
/* Custom Properties */
/* ----------------- */

/* This is the usual way of doing things but... :root {
  --VoidBlue: hsla(230, 35%, 7%);
  --Periwinkle: hsla(231, 77%, 90%);
  --White: hsla(0, 0, 100%);
}  can do it this way and use classes below to more easily manipulate the a values on hsla*/

:root {
  /* colors */
  --clr-dark: 230 35% 7%;
  --clr-light: 231 77% 90%;
  --clr-white: 0 0% 100%;

  /* font-sizes */
  /* Divide by 16 if given px to get rem; rem used to respect user preferences*/
  --fs-900: 9.375rem;
  --fs-800: 6.25rem;
  --fs-700: 3.5rem;
  --fs-600: 2rem;
  --fs-500: 1.75rem;
  --fs-400: 1.125rem;
  --fs-300: 1rem;
  --fs-200: 0.875rem;

  /* font-families */
  --ff-serif: "Bellefair", serif;
  --ff-sans-cond: "Barlow Condensed", sans-serif;
  --ff-sans-normal: "Barlow", sans-serif;
}

/* ---------------------------*/
/* Reset Template*/
/* -------------------------- */

/* Good for copy/paste resets: https://piccalil.li/blog/a-modern-css-reset/, Eric Myer, normalize, sanitize */

/* Box Sizing */

*,
*::before,
*::after {
  box-sizing: border-box;
}

/* Margin reset */

body,
h1,
h2,
h3,
h4,
h5,
p,
figure,
picture {
  margin: 0;
}

h1,
h2,
h3,
h4,
h5,
h6,
p {
  font-weight: 400;
}

/* set up the body */
body {
  font-family: var(--ff-sans-normal);
  font-size: var(--fs-400);
  background-color: hsl(var(--clr-dark));
  color: hsl(var(--clr-white));
  line-height: 1.5;
  min-height: 100vh;
}

/* make images easier to work with */
img,
picture {
  max-width: 100%;
  display: block;
}

/* make form elements easier to work with */
input,
button,
textarea,
select {
  font: inherit;
}

/* remove animations for people who've turned them off */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* ---------------------------*/
/* Utility Classes*/
/* -------------------------- */

.flex {
  display: flex;
  gap: var(--gap, 1rem);
}

.grid {
  display: grid;
  gap: var(--gap, 1rem);
}

/* a little something to do with cube css and andy bell */
/* makes it so the first element has no margin on top and the last element has no margin on the bottom. Could also use *:not(:first-child) or prefix *:where */

.flow > * + * {
  margin-top: var(--flow-space, 1rem);
}

.container {
  padding-inline: 2em;
  max-width: 80rem;
  margin-inline: auto;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap; /* added line */
  border: 0;
}

.box {
  background-color: lightblue;
  padding: 3rem;
}

/* colors */

.bg-dark {
  background-color: hsl(var(--clr-dark));
}
.bg-accent {
  background-color: hsl(var(--clr-light));
}
.bg-white {
  background-color: hsl(var(--clr-white));
}

.text-dark {
  color: hsl(var(--clr-dark));
}
.text-accent {
  color: hsl(var(--clr-light));
}
.text-white {
  color: hsl(var(--clr-white));
}

/* typography */

.ff-serif {
  font-family: var(--ff-serif);
}
.ff-sans-cond {
  font-family: var(--ff-sans-cond);
}
.ff-sans-normal {
  font-family: var(--ff-sans-normal);
}

.letter-spacing-1 {
  letter-spacing: 4.75px;
}
.letter-spacing-2 {
  letter-spacing: 2.7px;
}
.letter-spacing-3 {
  letter-spacing: 2.35px;
}

.uppercase {
  text-transform: uppercase;
}

.fs-900 {
  font-size: var(--fs-900);
}
.fs-800 {
  font-size: var(--fs-800);
}
.fs-700 {
  font-size: var(--fs-700);
}
.fs-600 {
  font-size: var(--fs-600);
}
.fs-500 {
  font-size: var(--fs-500);
}
.fs-400 {
  font-size: var(--fs-400);
}
.fs-300 {
  font-size: var(--fs-300);
}
.fs-200 {
  font-size: var(--fs-200);
}

.fs-900,
.fs-800,
.fs-700,
.fs-600 {
  line-height: 1.1;
}

.numbered-title {
  font-size: var(--fs-500);
  font-family: var(--ff-sans-cond);
  text-transform: uppercase;
  letter-spacing: 0.295rem;
}

.numbered-title span {
  color: hsl(var(--clr-white) / 0.25);
  margin-right: 0.5em;
  font-weight: 700;
}

/* Components */
/* to get the text in the center of the button used padding 0 on top/bot and 2em for L/R. usually display: inline-block */

.large-button {
  position: relative;
  display: grid;
  z-index: 1;
  padding: 0 2em;
  border-radius: 50%;
  place-items: center;
  aspect-ratio: 1;
  text-decoration: none;
}

.large-button::after {
  content: "";
  width: 100%;
  height: 100%;
  border-radius: 50%;
  position: absolute;
  z-index: -1;
  opacity: 0;
  background-color: hsl(var(--clr-white) / 0.15);
  transition: opacity 500ms linear, transform 750ms ease-in-out;
}
.large-button:hover::after,
.large-button:focus::after {
  opacity: 1;
  transform: scale(1.5);
}

.primary-nav {
  --gap: 8rem;
  --underline-gap: 2rem;
  list-style: none;
  padding: 0;
  margin: 0;
}

.primary-nav a {
  text-decoration: none;
}

.primary-nav a > span {
  font-weight: 700;
  margin-right: 0.5em;
}

.underline-indicators > * {
  cursor: pointer;
  padding: var(--underline-gap, 1rem) 0;
  border: 0;
  border-bottom: 0.2rem solid hsl(var(--clr-white) / 0);
}

.underline-indicators > *:hover,
.underline-indicators > *:focus {
  border-color: hsl(var(--clr-white) / 0.5);
}

.underline-indicators > .active,
.underline-indicators > [aria-selected="true"] {
  color: hsl(var(--clr-white) / 1);
  border-color: hsl(var(--clr-white) / 1);
}

.tab-list {
  --gap: 2.25rem;
}

.dot-indicators > * {
  cursor: pointer;
  background-color: hsl(var(--clr-white) / 0.25);
  border: 0;
  padding: 0.5rem;
  border-radius: 50%;
}

.dot-indicators > *:hover,
.dot-indicators > *:focus {
  background-color: hsl(var(--clr-white) / 0.5);
}

.dot-indicators > .active,
.dot-indicators > [aria-selected="true"] {
  background-color: hsl(var(--clr-white) / 1);
}

.num-indicators > * {
  cursor: pointer;
  display: grid;
  background-color: hsl(var(--clr-dark) / 1);
  height: 5rem;
  width: 5rem;
  border-radius: 50%;
  place-items: center;
  font-family: var(--ff-serif);
  font-size: var(--fs-600);
  color: hsl(var(--clr-white) / 1);
  border: 1px solid hsl(var(--clr-white) / 0.25);
  aspect-ratio: 1;
}
.num-indicators *:hover,
.num-indicators *:focus {
  border-color: hsl(var(--clr-white) / 1);
}
.num-indicators > .active,
.num-indicators > [aria-selected="true"] {
  background-color: hsl(var(--clr-white) / 1);
  color: hsl(var(--clr-dark) / 1);
}

/*Could use peusdo-class hover but better to use ::after and hide until hover    position relative on .large-button so that it becomes the containing block for .large-button::after  use z-index: 1 on parent .large-button to create a stacking context for the ::after element
 .large-button:hover {
  box-shadow: 0px 0px 0px 87.5px hsl(var(--clr-white) / 0.1);
} */
